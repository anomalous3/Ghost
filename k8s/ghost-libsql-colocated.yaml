apiVersion: apps/v1
kind: Deployment
metadata:
  name: ghost-creator1
  namespace: ghost-multisite
  labels:
    app: ghost-multisite
    creator: creator1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ghost-multisite
      creator: creator1
  template:
    metadata:
      labels:
        app: ghost-multisite
        creator: creator1
    spec:
      containers:
      - name: ghost-libsql
        image: node:18-alpine
        ports:
        - containerPort: 2368
          name: ghost-http
        - containerPort: 8081
          name: libsql-http
        env:
        - name: NODE_ENV
          value: production
        - name: CREATOR_ID
          value: creator1
        - name: GHOST_CONTENT
          value: /var/lib/ghost/content
        volumeMounts:
        - name: ghost-content
          mountPath: /var/lib/ghost/content
        - name: ghost-source
          mountPath: /var/lib/ghost/ghost
        command:
        - /bin/sh
        - -c
        - |
          echo "üöÄ Starting Ghost + libSQL for creator1..."
          
          # Install system dependencies
          apk add --no-cache sqlite curl
          
          # Download and install libSQL server
          cd /tmp
          echo "üì• Downloading libSQL server..."
          curl -L https://github.com/tursodatabase/libsql/releases/download/libsql-server-v0.24.32/libsql-server-x86_64-unknown-linux-gnu.tar.xz -o libsql.tar.xz
          tar -xf libsql.tar.xz
          cp libsql-server-x86_64-unknown-linux-gnu/sqld /usr/local/bin/sqld
          chmod +x /usr/local/bin/sqld
          echo "‚úÖ libSQL installed: $(sqld --version)"
          
          # Create directories
          mkdir -p /var/lib/ghost/content/data
          mkdir -p /var/lib/ghost/content/logs
          
          # Initialize creator database if it doesn't exist
          if [ ! -f "/var/lib/ghost/content/data/ghost-creator1.db" ]; then
            echo "üóÑÔ∏è Creating creator1 database..."
            sqlite3 /var/lib/ghost/content/data/ghost-creator1.db "
              CREATE TABLE posts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                uuid TEXT NOT NULL UNIQUE,
                title TEXT NOT NULL,
                slug TEXT NOT NULL UNIQUE,
                content TEXT,
                html TEXT,
                status TEXT DEFAULT 'draft',
                featured INTEGER DEFAULT 0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
              );
              
              CREATE TABLE members (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                uuid TEXT NOT NULL UNIQUE,
                email TEXT NOT NULL UNIQUE,
                name TEXT,
                status TEXT DEFAULT 'free',
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
              );
              
              -- Sample data
              INSERT INTO posts (uuid, title, slug, content, html, status, featured) VALUES 
              ('$(uuidgen)', 'Welcome to Creator1', 'welcome-creator1', 'Your multi-site Ghost is ready!', '<p>Your multi-site Ghost is ready!</p>', 'published', 1),
              ('$(uuidgen)', 'Second Post', 'second-post', 'Another great post from creator1', '<p>Another great post from creator1</p>', 'published', 0);
              
              INSERT INTO members (uuid, email, name, status) VALUES 
              ('$(uuidgen)', 'fan1@creator1.com', 'Creator1 Fan', 'free'),
              ('$(uuidgen)', 'subscriber@creator1.com', 'Paid Subscriber', 'paid');
            "
            echo "‚úÖ Creator1 database initialized"
          fi
          
          # Start libSQL server in background
          echo "üóÑÔ∏è Starting libSQL server on port 8081..."
          sqld \
            --http-listen-addr 0.0.0.0:8081 \
            --db-path /var/lib/ghost/content/data/ghost-creator1.db \
            --enable-bottomless-replication=false \
            >> /var/lib/ghost/content/logs/libsql.log 2>&1 &
          
          LIBSQL_PID=$!
          echo "‚úÖ libSQL started (PID: $LIBSQL_PID)"
          
          # Wait for libSQL to be ready
          sleep 3
          echo "üîç Testing libSQL connection..."
          curl -s http://localhost:8081/v2/pipeline -X POST \
            -H "Content-Type: application/json" \
            -d '{"requests": [{"type": "execute", "stmt": {"sql": "SELECT COUNT(*) as post_count FROM posts"}}]}' \
            || echo "libSQL not ready yet..."
          
          # Install Ghost dependencies (in background to speed up startup)
          echo "üì¶ Installing Ghost dependencies..."
          cd /var/lib/ghost/ghost/core
          npm ci --only=production --silent &
          NPM_PID=$!
          
          # Wait for npm install to complete
          wait $NPM_PID
          echo "‚úÖ Ghost dependencies installed"
          
          # Create Ghost configuration for this creator
          cat > config.production.json << EOF
          {
            "url": "http://localhost:2368",
            "server": {
              "port": 2368,
              "host": "0.0.0.0"
            },
            "database": {
              "client": "better-sqlite3",
              "connection": {
                "filename": "/var/lib/ghost/content/data/ghost-creator1.db"
              }
            },
            "mail": {
              "transport": "Direct"
            },
            "logging": {
              "transports": ["file", "stdout"],
              "level": "info"
            },
            "process": "local",
            "paths": {
              "contentPath": "/var/lib/ghost/content"
            }
          }
          EOF
          
          # Start Ghost
          echo "üëª Starting Ghost CMS..."
          exec node index.js
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 2368
          initialDelaySeconds: 120
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 2368
          initialDelaySeconds: 30
          periodSeconds: 10

      volumes:
      - name: ghost-content
        emptyDir: {}
      - name: ghost-source
        configMap:
          name: ghost-source

      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: ghost-creator1-service
  namespace: ghost-multisite
spec:
  selector:
    app: ghost-multisite
    creator: creator1
  ports:
  - name: ghost-http
    port: 2368
    targetPort: 2368
  - name: libsql-http
    port: 8081
    targetPort: 8081
  type: LoadBalancer
---
# Second creator site
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ghost-creator2
  namespace: ghost-multisite
  labels:
    app: ghost-multisite
    creator: creator2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ghost-multisite
      creator: creator2
  template:
    metadata:
      labels:
        app: ghost-multisite
        creator: creator2
    spec:
      containers:
      - name: ghost-libsql
        image: node:18-alpine
        ports:
        - containerPort: 2368
          name: ghost-http
        - containerPort: 8082
          name: libsql-http
        env:
        - name: NODE_ENV
          value: production
        - name: CREATOR_ID
          value: creator2
        - name: GHOST_CONTENT
          value: /var/lib/ghost/content
        volumeMounts:
        - name: ghost-content
          mountPath: /var/lib/ghost/content
        - name: ghost-source
          mountPath: /var/lib/ghost/ghost
        command:
        - /bin/sh
        - -c
        - |
          echo "üöÄ Starting Ghost + libSQL for creator2..."
          
          # Install system dependencies
          apk add --no-cache sqlite curl
          
          # Download and install libSQL server
          cd /tmp
          echo "üì• Downloading libSQL server..."
          curl -L https://github.com/tursodatabase/libsql/releases/download/libsql-server-v0.24.32/libsql-server-x86_64-unknown-linux-gnu.tar.xz -o libsql.tar.xz
          tar -xf libsql.tar.xz
          cp libsql-server-x86_64-unknown-linux-gnu/sqld /usr/local/bin/sqld
          chmod +x /usr/local/bin/sqld
          
          # Create directories and database
          mkdir -p /var/lib/ghost/content/data
          mkdir -p /var/lib/ghost/content/logs
          
          if [ ! -f "/var/lib/ghost/content/data/ghost-creator2.db" ]; then
            echo "üóÑÔ∏è Creating creator2 database..."
            sqlite3 /var/lib/ghost/content/data/ghost-creator2.db "
              CREATE TABLE posts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                uuid TEXT NOT NULL UNIQUE,
                title TEXT NOT NULL,
                slug TEXT NOT NULL UNIQUE,
                content TEXT,
                html TEXT,
                status TEXT DEFAULT 'draft',
                featured INTEGER DEFAULT 0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
              );
              
              CREATE TABLE members (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                uuid TEXT NOT NULL UNIQUE,
                email TEXT NOT NULL UNIQUE,
                name TEXT,
                status TEXT DEFAULT 'free',
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
              );
              
              INSERT INTO posts (uuid, title, slug, content, html, status, featured) VALUES 
              ('$(uuidgen)', 'Welcome to Creator2', 'welcome-creator2', 'Creator2 site is live!', '<p>Creator2 site is live!</p>', 'published', 1),
              ('$(uuidgen)', 'Creator2 Content', 'creator2-content', 'Exclusive content from creator2', '<p>Exclusive content from creator2</p>', 'published', 0);
              
              INSERT INTO members (uuid, email, name, status) VALUES 
              ('$(uuidgen)', 'fan@creator2.com', 'Creator2 Fan', 'paid'),
              ('$(uuidgen)', 'member@creator2.com', 'Free Member', 'free');
            "
          fi
          
          # Start libSQL server in background
          sqld \
            --http-listen-addr 0.0.0.0:8082 \
            --db-path /var/lib/ghost/content/data/ghost-creator2.db \
            --enable-bottomless-replication=false \
            >> /var/lib/ghost/content/logs/libsql.log 2>&1 &
          
          sleep 3
          
          # Install Ghost dependencies and start
          cd /var/lib/ghost/ghost/core
          npm ci --only=production --silent
          
          # Create Ghost configuration
          cat > config.production.json << EOF
          {
            "url": "http://localhost:2368",
            "server": {
              "port": 2368,
              "host": "0.0.0.0"
            },
            "database": {
              "client": "better-sqlite3",
              "connection": {
                "filename": "/var/lib/ghost/content/data/ghost-creator2.db"
              }
            },
            "mail": {
              "transport": "Direct"
            },
            "logging": {
              "transports": ["file", "stdout"],
              "level": "info"
            },
            "process": "local",
            "paths": {
              "contentPath": "/var/lib/ghost/content"
            }
          }
          EOF
          
          echo "üëª Starting Ghost CMS for creator2..."
          exec node index.js
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"

      volumes:
      - name: ghost-content
        emptyDir: {}
      - name: ghost-source
        configMap:
          name: ghost-source

      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: ghost-creator2-service
  namespace: ghost-multisite
spec:
  selector:
    app: ghost-multisite
    creator: creator2
  ports:
  - name: ghost-http
    port: 2368
    targetPort: 2368
  - name: libsql-http  
    port: 8082
    targetPort: 8082
  type: LoadBalancer